:orphan:

.. ****************************************************************************
.. CUI
..
.. The Advanced Framework for Simulation, Integration, and Modeling (AFSIM)
..
.. The use, dissemination or disclosure of data in this file is subject to
.. limitation or restriction. See accompanying README and LICENSE for details.
.. ****************************************************************************

WSF_DISTANCE_STEPPED_GRID
-------------------------

.. model:: grid WSF_DISTANCE_STEPPED_GRID

   .. parsed-literal::

      :doc:`grid <wsf_coverage_grid>` <name> :model:`WSF_DISTANCE_STEPPED_GRID`
         ... `Common Grid Commands`_ ...
         size_ ...
         step_distance_ ...
         origin_index_ ...
         altitude_ ...
         origin_ ...
         asset_ ...
      end_grid

Overview
========

The :model:`WSF_DISTANCE_STEPPED_GRID` is a coverage grid that contains points
that are separated by a given distance. The grid will form a user specified
number of rows each of which is at a certain latitude, and is a user specified
distance from adjacent rows. Each row will contain a user specified number of
points, each of which is separated from its neighbors in the row by a user
specified distance. All of the grid points will be at the same user specified
altitude.

.. include:: common_grid_commands.txt

Commands
========

.. command:: size <integer> <integer>

   Set the size of the grid. The first value gives the number of rows in
   the grid. The second value gives the number of points in each row. The
   resulting number of grid points will be the product of the two provided
   values.

.. command:: step_distance <length-value> <length-value>

   Specify the distance between adjacent grid points. The first value gives
   the separation distance between one row and the next. The second value gives
   the separation distance between points in the same row.

.. command:: origin_index <integer> <integer>

   Specify the position in the grid that is at the location given by the origin_
   command. These values start from 0 and count from the south west corner.
   For example:

   .. parsed-literal:: origin_index 0 0

   would be the southwest corner, and for a grid with 4 rows and 5 points
   per row,

   .. parsed-literal:: origin_index 3 4

   would be the northeast corner.

.. command:: origin <latitude-value> <longitude-value>

   Set the origin point in the grid, the point from which the other rows and
   members in each row are spaced. There will be one row in the grid at the
   given latitude, and there will be one point in each row of the grid at the
   given longitude.

.. include:: rectangular_grid_commands.txt
