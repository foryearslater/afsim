:orphan:

.. ****************************************************************************
.. CUI
..
.. The Advanced Framework for Simulation, Integration, and Modeling (AFSIM)
..
.. The use, dissemination or disclosure of data in this file is subject to
.. limitation or restriction. See accompanying README and LICENSE for details.
.. ****************************************************************************

WSF_STATE_MACHINE
-----------------

**Derives From:** :model:`WSF_SCRIPT_PROCESSOR`

.. model:: processor WSF_STATE_MACHINE

    .. parsed-literal::

     processor <name> :model:`WSF_STATE_MACHINE`

       :command:`WSF_SCRIPT_PROCESSOR` Commands ...

       show_state_evaluations_
       show_state_transitions_

       state_ *<state-name>*
          *... state definition ...*
       end_state

       # `Script Interface`_

        :command:`on_initialize` ... end_on_initialize
        :command:`on_initialize2` ... end_on_initialize2
        :command:`on_update` ... end_on_update
        :command:`_.script_commands.script_variables` ... end_script_variables
        :command:`_.script_commands.script` ... end_script
        .. Other Script Commands ...

     end_processor

Overview
========

WSF_STATE_MACHINE uses the concept of a finite state machine.  The user defines a set of transition rules that define
the conditions under which a transition can occur from one state to another. The transition rules are defined using the
:ref:`WSF scripting language <script>`. Similar to the :model:`WSF_SCRIPT_PROCESSOR`, the WSF_STATE_MACHINE does not have
direct access to tracks; hence, the TRACK variable **cannot** be used.

Commands
========

.. command:: show_state_evaluations

   Indicates that information about state evaluations should be written to standard output. This essentially shows the
   true or false status of the evaluation of each next_state block.

.. command:: show_state_transitions

   Indicates that information about state transitions should be written to standard output.

.. command:: state <state-name>

   Defines a state in a state machine with the name <state-name>.  Besides transition conditions, notice a state can have
   its own :command:`behavior_tree` inside.

   .. parsed-literal::

      state <state-name>
        on_entry
           ...
        end_on_entry
        on_exit
           ...
        end_on_exit
        next_state <next-state-name-1>
           ...
        end_next_state
        next_state <next-state-name-n>
           ...
        end_next_state
        behavior_tree
            :command:`behavior_tree` Commands ...
        end_behavior_tree
    end_state

Script Interface
================

:model:`WSF_STATE_MACHINE` utilizes the capabilities of the :ref:`Common_Script_Interface` and :model:`WSF_SCRIPT_PROCESSOR`.
