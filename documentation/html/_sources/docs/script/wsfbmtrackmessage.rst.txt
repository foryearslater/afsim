:orphan:

.. ****************************************************************************
.. CUI//REL TO USA ONLY
..
.. The Advanced Framework for Simulation, Integration, and Modeling (AFSIM)
..
.. The use, dissemination or disclosure of data in this file is subject to
.. limitation or restriction. See accompanying README and LICENSE for details.
.. ****************************************************************************

WsfBMTrackMessage
-----------------

.. class:: WsfBMTrackMessage inherits WsfMessage
   :cloneable:
   :constructible:

**WsfBMTrackMessage** is the script interface for the battle manager
internal track object.


Methods
=======

.. method:: void SetDataTime(double time)

   Sets time the data in message corresponds to.

.. method:: double GetDataTime()

   Gets time the data in message corresponds to.

.. method:: void SetUpdateInterval(double interval_time_secs)

   Sets the track update interval(expected time between updates)

.. method:: double GetUpdateInterval()

   Gets the track update interval(expected time between updates)

.. method:: void SetTrackID(int reporting_platform_idx, int tan)

	Sets the track identification.

	**Parameters**

		**int reporting_platform_idx:** Reporting Platform Index.

		**int tan:** Track number.

.. method:: int GetTrackingSystemID()

   Gets the reporting_platform_idx set within the [SetTrackID]{#SetTrackID call.

.. method:: int GetTrackingSystemTrackID()

   Gets the tan set within the [SetTrackID]{#SetTrackID} call.

.. method:: void SetLLA(double lat_rads, double lon_rads, double alt_meters)

   Sets the track position.

.. method:: double GetLat()

   Returns the latitude set in `SetLLA <#WsfBMTrackMessage.SetLLA>`__ in radians.

.. method:: double GetLon()

   Returns the longitude set in `SetLLA <#WsfBMTrackMessage.SetLLA>`__ in radians.

.. method:: double GetAlt()

   Returns the altitude set in `SetLLA <#WsfBMTrackMessage.SetLLA>`__ in meters.

.. method:: void SetECEFVel(double Vx_ms, double Vy_ms, double Vz_ms)

   Sets the track ECEF velocity.

.. method:: double GetVx()

   Returns the ECEF-X velocity component set in
   `SetECEFVel <#WsfBMTrackMessage.SetECEFVel>`__ in meters/second.

.. method:: double GetVy()

   Returns the ECEF-Y velocity component set in
   `SetECEFVel <#WsfBMTrackMessage.SetECEFVel>`__ in meters/second.

.. method:: double GetVz()

   Returns the ECEF-Z velocity component set in
   `SetECEFVel <#WsfBMTrackMessage.SetECEFVel>`__ in meters/second.

.. method:: void SetCovarianceMatrix(WsfCovariance covariance)

   Sets the covariance matrix of the track.

.. method:: WsfCovariance GetCovarianceMatrix()

	 Gets the covariance matrix of the track set in SetCovarianceMatrix

.. method:: void SetHeadingDegs(double heading_degrees)

   Sets the track heading in degrees wrt true north.

.. method:: void SetOrientationDegs(double psi_degs, double theta_degs, double phi_degs)

   Sets the Euler angles of the reported platform wrt ECEF coordinates.

.. method:: double GetOrientationPsiDegs()

   Gets psi component of the ECEF orientation set in the call to
   `SetOrientationDegs <#WsfBMTrackMessage.SetOrientationDegs>`__ in degrees.

.. method:: double GetOrientationThetaDegs()

   Gets theta component of the ECEF orientation set in the call to
   `SetOrientationDegs <#WsfBMTrackMessage.SetOrientationDegs>`__ in degrees.

.. method:: double GetOrientationPhiDegs()

   Gets phi component of the ECEF orientation set in the call to
   `SetOrientationDegs <#WsfBMTrackMessage.SetOrientationDegs>`__ in degrees.

.. method:: void SetType(string type, string subtype)

   Sets the track type and subtype as strings. These will be the typing
   information that the battle manager uses in threat evaluation.

.. method:: string GetType()

   Gets the type string set in the call to `SetType <#WsfBMTrackMessage.SetType>`__.

.. method:: string GetSubType()

   Gets the subtype string set in the call to `SetType <#WsfBMTrackMessage.SetType>`__.

.. method:: void SetTrackingStatusNormal()

   Sets the tracking status of the track to normal.

.. method:: void SetTrackingStatusCoasting()

   Sets the tracking status of the track to coasting(missed update).

.. method:: void SetTrackingStatusTimedOut()

   Sets the tracking status of the track to timed-out.

.. method:: void SetTrackingStatusDropping()

   Sets the tracking status of the track to dropping.

.. method:: void SetTrackingStatusDropped()

   Sets the tracking status of the track to dropped.

.. method:: bool IsTrackingStatusNormal()

   Returns true if the tracking status is normal, otherwise false.

.. method:: bool IsTrackingStatusCoasting()

   Returns true if the tracking status is coasting, otherwise false.

.. method:: bool IsTrackingStatusTimedOut()

   Returns true if the tracking status is timed-out, otherwise false.

.. method:: bool IsTrackingStatusDropping()

   Returns true if the tracking status is dropping, otherwise false.

.. method:: bool IsTrackingStatusDropped()

   Returns true if the tracking status is dropped, otherwise false.

.. method:: void SetAltitudeReliable(bool is_reliable)

   Sets the altitude as reliable if true, otherwise unreliable.

   **Currently unsupported**

.. method:: bool GetAltitudeReliable(bool is_reliable)

   Returns true if altitude was set to reliable(via the call to
   `SetAltitudeReliable <#WsfBMTrackMessage.SetAltitudeReliable>`__), otherwise false.

   **Currently unsupported**

.. method:: void SetIFFUnknown()

   Sets the IFF status of the track to unknown.

.. method:: void SetIFFFriendly()

   Sets the IFF status of the track to friendly.

.. method:: void SetIFFHostile()

   Sets the IFF status of the track to hostile.

.. method:: void SetIFFNeutral()

   Sets the IFF status of the track to neutral.

.. method:: bool IsIFFUnknown()

   Returns true if the tracking status is unknown, otherwise false.

.. method:: bool IsIFFFriendly()

   Returns true if the tracking status is friendly, otherwise false.

.. method:: bool IsIFFHostile()

   Returns true if the tracking status is hostile, otherwise false.

.. method:: bool IsIFFNeutral()

   Returns true if the tracking status is neutral, otherwise false.

.. method:: void SetManeuveringFlag(bool is_maneuvering)

   Sets the track as maneuvering if the flag is set to true, otherwise
   maneuvering will be set to false.

.. method:: bool GetManeuveringFlag()

   Returns true if the track maneuvering was set to true, otherwise
   false.

.. method:: void SetQuantity(int quantity)

   Allows setting of the track strength.

.. method:: int GetQuantity()

   Returns strength setting from the call to
   `SetQuantity <#WsfBMTrackMessage.SetQuantity>`__.

.. method:: void SetJamming(bool is_jamming)

   Sets track as jamming if true, otherwise not jamming.

.. method:: bool GetJamming()

   Returns true if the track jamming flag is set, otherwise false.

.. method:: void SetJammingPower(double power_dB)

   Sets track jamming power in dB.

.. method:: double GetJammingPower()

   Returns the jamming power in dB set in the call to `SetJammingPower <#WsfBMTrackMessage.SetJammingPower>`__.

.. method:: void SetTargetTruthName(string truth_platform_name)

   Sets target truth name for logging purposes.

.. method:: string GetTargetTruthName()

   Returns the target truth name set in the call to
   `SetTargetTruthName <#WsfBMTrackMessage.SetTargetTruthName>`__.

.. method:: void SetTargetTruthID(int target_truth_platform_id)

   Sets target truth platform index for logging purposes.

.. method:: int GetTargetTruthID()

   Returns the target truth platform index set in the call to
   `SetTargetTruthID <#WsfBMTrackMessage.SetTargetTruthID>`__.

.. method:: void SetReportingSensorType(string reporting_sensor_type)

   Sets reporting sensor type string.

.. method:: string GetTargetTruthID()

   Returns the reporting sensor type string set in the call to
   `SetReportingSensorType <#WsfBMTrackMessage.SetReportingSensorType>`__.

