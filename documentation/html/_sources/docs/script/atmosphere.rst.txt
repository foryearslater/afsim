:orphan:

.. ****************************************************************************
.. CUI
..
.. The Advanced Framework for Simulation, Integration, and Modeling (AFSIM)
..
.. The use, dissemination or disclosure of data in this file is subject to
.. limitation or restriction. See accompanying README and LICENSE for details.
.. ****************************************************************************

Atmosphere
----------

.. class:: Atmosphere
   :constructible:
   :cloneable:

Static Methods
==============

.. method:: static Atmosphere Construct(string aAtmosphereType)
   
   Returns a new Atmosphere object of the given type. Valid types are "standard_day", "hot_day", "tropical_day",
   "cold_day", "polar_day", "simple_dt", and "default". 
   See :doc:`../atmosphere` for more information.
      
   Example::

    Atmosphere atm = Atmosphere.Construct("standard");

Methods
=======      
      
.. method:: double Density(double aAltitude)

   Returns the atmospheric density [kg/meters^3] given the altitude [meters].

.. method:: double Pressure(double aAltitude)

   Returns the atmospheric pressure [N/meters^2] given the altitude [meters].
   
.. method:: double SonicVelocity(double aAltitude)

   Returns the speed of sound [meters/second] given the altitude [meters].
   
.. method:: double Temperature(double aAltitude)

   Returns the atmospheric temperature [Kelvins] given the altitude [meters].

.. method:: bool CanProduceContrails(double aAltitude)

   Returns true if contrails may be produced at the given altitude [meters], otherwise false.

.. method:: double ContrailingFloor()

   Returns the altitude [meters] of the lower bound of the contrailing band.

.. method:: double ContrailingCeiling()

   Returns the altitude [meters] of the upper bound of the contrailing band.
