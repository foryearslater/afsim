:orphan:

.. ****************************************************************************
.. CUI//REL TO USA ONLY
..
.. The Advanced Framework for Simulation, Integration, and Modeling (AFSIM)
..
.. The use, dissemination or disclosure of data in this file is subject to
.. limitation or restriction. See accompanying README and LICENSE for details.
.. ****************************************************************************

WsfBMWeaponInterface
--------------------

.. class:: WsfBMWeaponInterface

**WsfBMWeaponInterface** is the script interface for the battle manager's
friendly weapon perception. Assets that have weapons will be able to use
this interface to add weapon initialization for those weapons and calling
the `WsfBMAssetRecord <#wsfbmassetrecord>`__
`AddWeaponInfo <#WsfBMAssetRecord.AddWeaponInfo>`__ () interface. This
interface primarily introspects the referenced AFSIM weapon and passes that
on to the appropriate models(hence the getters but no setters).


Methods
=======

.. method:: void SetSAMInfo(WsfBMAssetRecord asset_record, int weapon_idx)

   Marks the weapon as a surface-to-air missile and the asset as a SAM system.

   **Parameters**

   **WsfBMAssetRecord asset_record:** asset record that the weapon will be attached to.

      **string name:** Platform name of the referenced asset.

      **int weapon_idx:** Weapon index(0-based) of the
      :class:`WsfWeapon` on the reported platform
      for this assignment.

.. method:: void SetAIInfo(WsfBMAssetRecord asset_record, int weapon_idx)

   Marks the weapon as a air-to-air missile and the asset as an AI system.

   **Parameters**

      **WsfBMAssetRecord asset_record:** asset record that the weapon will be attached to.

      **string name:** Platform name of the referenced asset.

      **int weapon_idx:** Weapon index(0-based) of the
      :class:`WsfWeapon` on the reported platform for this assets weapon.

.. method:: int GetNumMunitions()

   Returns the number of munitions on the underlying AFSIM weapon.

.. method:: int GetMaxEngagements()

   Returns the max simulataneous engagements of the underlying AFSIM weapon.
   :method:`WsfWeapon.MaximumRequestCount`.

.. method:: double GetInterceptSpeed()

   Returns the intercept speed of the underlying weapon. Since this is not a property
   of the current AFSIM weapon classes, this interface looks for aux data attached to
   the weapon with the name of WSF_BM_WSYS_INTERCEPT_SPEED containing the average
   intercept speed of the weapon in meters/second.

.. method:: int GetWsysID()

   Returns the weapon system id of the weapon. This corresponds to the weapon
   index(0-based) of the :class:`WsfWeapon` on the
   reported platform for this assets weapon.

.. method:: void AddMez(WsfZone zone, double priority)

   Adds zone as a missile engagement zone to the weapon. Multiple zones can
   be attached to a single weapon.

   **Parameters**

   **WsfZone zone:** Zone definition of the MEZ.

   **double priority:** Zone priority 1.0 being the highest priority.

.. method:: void AddFez(:class:`WsfZone` zone, double priority)

   Adds zone as a fighter engagement zone to the weapon. Multiple zones can be
   attached to a single weapon. This call is primarily added for symmetry with
   SAMS. Fighter engagement zones are typically employed at the asset level but
   this is achieved by adding the same FEZ to all AI weapons.

   **Parameters**

      **WsfZone zone:** Zone definition of the  FEZ.

      **double priority:** Zone priority 1.0 being the highest priority.

.. method:: void AddJez(WsfZone zone, double priority)

   Adds zone as a joint engagement zone to the weapon. Multiple zones can
   be attached to a single weapon.

   **Parameters**

      **WsfZone zone:** Zone definition of the MEZ.

      **double priority:** Zone priority 1.0 being the highest priority.

