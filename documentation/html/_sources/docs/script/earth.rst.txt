:orphan:

.. ****************************************************************************
.. CUI
..
.. The Advanced Framework for Simulation, Integration, and Modeling (AFSIM)
..
.. The use, dissemination or disclosure of data in this file is subject to
.. limitation or restriction. See accompanying README and LICENSE for details.
.. ****************************************************************************

Earth
-----

.. class:: Earth

:class:`Earth` provides basic properties for gravity, size/shape, rotation, and standard sea level air characteristics.

Static Methods
==============

.. method:: static double ACCEL_OF_GRAVITY()

   Returns the acceleration due to gravity at earth's surface (9.80665 m/s^2).

   .. note::

      This value is defined by the ISO-80000-3 standard, not the result of a specific measurement.


.. method:: static double GRAVITATIONAL_PARAMETER()

   Returns Earth's gravitational parameter (3.986005e+14 m^3/s^2).

   .. note::

      This value is defined in the WGS-84 standard.


.. method:: static double SSL_AIR_DENSITY()

   Returns the density of air at standard sea level conditions (1.2250 kg / m^3).

.. method:: static double MASS()

   Returns the Earth's mass (5.9736e+24 kg).

.. method:: static double EQUATORIAL_RADIUS()

   Returns the Earth's equatorial radius (6378137.0 m).

   .. note::

      This value is defined in the WGS-84 standard.


.. method:: static double POLAR_RADIUS()

   Returns the Earth's polar radius (6356752.3142 m).

   .. note::

      This value is defined in the WGS-84 standard.


.. method:: static double MEAN_RADIUS()

   Returns the Earth's mean (spherical) radius (6371000.0 m).

   .. note::

      This value is the volumetric mean radius, or radius at which the volume of the
      ellipsoid is the same as the spherical volume.

.. method:: static double ROTATION_RATE()

   Returns the Earth's rotation rate (4.178074622245e-3 deg / s).

.. method:: static double GEOSTATIONARY_RADIUS()

   Return the radius of a geostationary orbit for the Earth (4.216416963417e+07 m).

.. method:: static bool LineOfSight(Vec3 aLocationECI_1, Vec3 aLocationECI_2)

   Returns whether the :ref:`ECI<ECI>` locations' line-of-sight with one another is blocked by the Earth.

.. method:: static Vec3 SubSolarPoint(Calendar aEpoch)

   Returns the WCS position of the sub-solar point at the given *aEpoch*.

.. method:: static Vec3 SubLunarPoint(Calendar aEpoch)

   Returns the WCS position of the sub-lunar point at the given *aEpoch*.

.. method:: static double CATE_Angle(Vec3 aObserverECI, Vec3 aTargetECI)

   Returns the CAmera-Target-Earth (CATE) angle in degrees. The CATE angle is the
   angle between the line segment from the given target ECI location,
   *aTargetECI*, to the given observer ECI location, *aObserverECI*, and the
   line segment from *aTargetECI* to the Earth.

.. method:: static Vec3 ConvertECI_ToWCS(Calendar aEpoch, Vec3 aLocationECI)

   Convert the given :ref:`ECI` *aLocationECI* at the given *aEpoch* to the equivalent
   position in the :ref:`WCS` frame.

   .. warning:: This method is computationally intensive, and may impact simulation run time.

.. method:: static Vec3 ConvertWCS_ToECI(Calendar aEpoch, Vec3 aLocationWCS)

   Convert the given :ref:`WCS` *aLocationWCS* at the given *aEpoch* to the equivalent
   position in the :ref:`ECI` frame.

   .. warning:: This method is computationally intensive, and may impact simulation run time.
