:orphan:

.. ****************************************************************************
.. CUI
..
.. The Advanced Framework for Simulation, Integration, and Modeling (AFSIM)
..
.. The use, dissemination or disclosure of data in this file is subject to
.. limitation or restriction. See accompanying README and LICENSE for details.
.. ****************************************************************************

WsfAdvancedBehaviorTreeNode
---------------------------

.. class:: WsfAdvancedBehaviorTreeNode inherits WsfObject

Methods
=======

.. method:: int Id()
   
   Returns the unique id of the node.  The Id is globally unique within the simulation, even nodes of the same type on
   other agent's behavior trees have a different Id.

.. method:: string Type()

   Returns the type of the node.  This may be a composite node type (parallel, sequence, sequence_with_memory, selector, selector_with_memory, priority_selector,
   weighted_random, decorator) or a user defined behavior_node type.

.. method:: int Failure(string aReason)
   
   Always returns the Failure state.  Allows the user to specify an optional reason for the node's failure state.  This method is
   used within a behavior's 'precondition' or 'execute' script block to indicate why the node is failing.

.. method:: int Success(string aReason)
   
   Always returns the Success state.  Allows the user to specify an optional reason for the node's success state.  This method is
   used within a behavior's 'precondition' or 'execute' script block to give extra information or indicate why the node succeeded.


.. method:: int Running(string aReason)
   
   Always returns the Running state.  Allows the user to specify an optional reason for the node's running state.  This method is
   used within a behavior's 'execute' script block to give extra information during execution.

.. method:: void TurnOff()
   
   Turns the node off.  This results in the node never being visited by the tree, nor any of its children.

.. method:: void TurnOn()
   
   Turns the node on.  This method is only useful if a node has previously been turned off, as all nodes start in the "on"
   setting.  Please note that, even if a node is on, it won't necessarily pass its precondition, it will simply be visited by
   the tree if appropriate (depending on the structure of the tree).

.. method:: int State()

   Return the current state for the node as an int (RUNNING = 1, SUCCESS = 2, FAILURE = 3, IDLE = 4, HALTED = 5, DISABLED = 6).

.. method:: string Tree()

   Returns the name of the owning tree for the node.

.. method:: void SetBlackboardVar(string aName, Object aValue);

   Store a variable on the blackboard with aName as the key and aValue as the value.

.. method:: void SetBlackboardTrackVar(string aName, WsfTrack aValue);

   Store a WsfTrack variable on the blackboard with aName as the key and aValue as the value.

.. method:: void SetBlackboardPlatformVar(string aName, WsfPlatform aValue);

   Store a WsfPlatform variable on the blackboard with aName as the key and aValue as the value.

.. method:: Object GetBlackboardVar(string aName);

   Return the value of the blackboard variable with name aName if it exists.

.. method:: bool BlackboardVarExists(string aName);

   Return true if the blackboard variable with name aName exists.

.. method:: void DeleteBlackboardVar(string aName);

   Delete the blackboard variable with name aName.

.. method:: void ShareBlackboard();

   Share this node's blackboard to the behavior tree with its current name.  Any other node will be able to access this blackboard using this name with shared blackboard commands.

.. method:: void ShareBlackboard(string aName);

   Share this node's blackboard to the behavior tree with name aName.  Any other node will be able to access this blackboard using this name with shared blackboard commands.

.. method:: void CreateSharedBlackboard(string aName);

   Create a new shared blackboard for the tree with name aName.

.. method:: void SetSharedBlackboardVar(string aBlackboard, string aName, Object aValue);

   Store a variable on the shared blackboard with name aBlackboard, using aName as the key and aValue as the value.

.. method:: void SetSharedBlackboardTrackVar(string aBlackboard, string aName, WsfTrack aValue);

   Store a WsfTrack variable on the shared blackboard with name aBlackboard, using aName as the key and aValue as the value.

.. method:: void SetSharedBlackboardPlatformVar(string aBlackboard, string aName, WsfPlatform aValue);

   Store a WsfPlatform variable on the shared blackboard with name aBlackboard, using aName as the key and aValue as the value.

.. method:: Object GetSharedBlackboardVar(string aBlackboard, string aName);

   Return the value of the shared blackboard variable with name aName if it exists.

.. method:: bool SharedBlackboardVarExists(string aBlackboard, string aName);

   Return true if the shared blackboard variable with name aName exists.

.. method:: void DeleteSharedBlackboardVar(string aBlackboard, string aName);

   This will delete the shared blackboard variable with name aName.

.. method:: bool SharedBlackboardExists(string aBlackboard);

   Return true if the shared blackboard with name aBlackboard exists.
