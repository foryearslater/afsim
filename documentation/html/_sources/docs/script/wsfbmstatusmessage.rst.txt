:orphan:

.. ****************************************************************************
.. CUI//REL TO USA ONLY
..
.. The Advanced Framework for Simulation, Integration, and Modeling (AFSIM)
..
.. The use, dissemination or disclosure of data in this file is subject to
.. limitation or restriction. See accompanying README and LICENSE for details.
.. ****************************************************************************

WsfBMStatusMessage
------------------

.. class:: WsfBMStatusMessage inherits WsfMessage
   :cloneable:
   :constructible:

**WsfBMStatusMessage** is the script interface for the battle manager
friendly asset perception.


Methods
=======

.. method:: void SetDataTime(double time)

   Sets time the data in message corresponds to.

.. method:: double GetDataTime()

   Gets time the data in message corresponds to.

.. method:: void SetSystemID(int platform_index)

   Sets the platform index that this asset status corresponds to.

.. method:: int GetSystemID()

   Gets the platform index that this asset status corresponds to.

.. method:: void SetMaxAssignments(int max_assignments)

   Sets the maximum simultaneous assignments supported by this asset.

.. method:: int GetMaxAssignments()

   Gets the maximum simultaneous assignments supported by this asset.

.. method:: void SetNumAssignments(int num_current_assignments)

   Sets the current number of assignments this asset has.

.. method:: int GetNumAssignments()

   Gets the current number of assignments this asset has.

.. method:: void SetWeaponStatus(int weapon_idx, int munitions_ready, int total_munitions, int total_fire_channels, int allocated_fire_channels)

   If the asset has weapons, allows setting of weapon information for the asset.

   **Parameters**

      **int weapon_idx:** Weapon index(0-based) of :class:`WsfWeapon` on the reported platform for this asset.

      **int munitions_ready:** Number of prepped munitions for the weapon.

      **int total_munitions:** Total number of munitions for the weapon.

      **int total_fire_channels:** Total number of fire channels for the weapon(max simultaneous assignments for the weapon).

      **int allocated_fire_channels:** Number of current fire channels allocate.

.. method:: void SetSystemStatusWhite()

   Sets the asset status to white(out of munitions).

.. method:: void SetSystemStatusGreen()

   Sets the asset status to green(normal).

.. method:: void SetSystemStatusYellow()

   Sets the asset status to yellow(pending stale).

.. method:: void SetSystemStatusRed()

   Sets the asset status to red(stale).

.. method:: bool IsSystemStatusWhite()

   Returns true if asset status is white, otherwise false.

.. method:: bool IsSystemStatusGreen()

   Returns true if asset status is green, otherwise false.

.. method:: bool IsSystemStatusYellow()

   Returns true if asset status is yellow, otherwise false.

.. method:: bool IsSystemStatusRed()

   Returns true if asset status is red, otherwise false.

.. method:: void SetPosition(WsfGeoPoint position)

   Sets the asset position.

.. method:: bool HasPosition()

   Returns true if the asset position has been set via a call to SetPosition.

.. method:: WsfGeoPoint GetPosition()

   Returns the assets position set from a call to SetPosition.

.. method:: void SetVelocityECEF(Vec3 ecef_meters_per_second)

   Sets the ECEF velocity of the asset in meters per second.

.. method:: bool HasVelocity()

   Returns true if the asset velocity has been set via a call to SetVelocityECEF.

.. method:: Vec3 GetVelocityECEF()

   Gets the ECEF velocity of the asset in meters per second.

