:orphan:

.. ****************************************************************************
.. CUI
..
.. The Advanced Framework for Simulation, Integration, and Modeling (AFSIM)
..
.. The use, dissemination or disclosure of data in this file is subject to
.. limitation or restriction. See accompanying README and LICENSE for details.
.. ****************************************************************************

launch_computer
---------------

See :ref:`Predefined_Launch_Computer_Types`

Script Class: :class:`WsfLaunchComputer`

.. command:: launch_computer
   :block:

.. parsed-literal::

   launch_computer <name> <base-type>
      debug_
      no_debug_
      ... :model:`WSF_LAUNCH_COMPUTER` Commands ...
   end_launch_computer

**<name>**
   Name of the new launch computer to be created.

**<base-type>**
   Name of an existing user-defined launch computer type, :model:`WSF_LAUNCH_COMPUTER` or one of the
   :ref:`Predefined_Launch_Computer_Types` whose definition will form initial definition of the new type.

Overview
========

This command defines a launch computer type which can be used by a :command:`weapon` to decide if the conditions are
favorable to a specific weapon - target engagement, and if so some information to guide employment of the weapon.

During an integrated battle, when many resources may potentially be used to strike the same
target, one key consideration is an estimate of how quickly a given resource can strike.  So a primary function that
each type of launch computer must provide is an estimate of time-to-intercept a target track.  If the engagement
conditions are completely unfavorable, a huge value is returned, indicating that no engagement is advised.  It would
then be up to the battle manager to intelligently choose between resources that provide an acceptably rapid
time-to-intercept, with an acceptable probability of success.

.. note::
   This probably should be called a 'weapon_computer' or 'weapon_engagement_computer' because 'launch_computer' implies the
   existence of a launched entity. This would not be true for things like directed energy weapons.

Commands
========

.. command:: debug

   Enables debug printouts during run time.

.. command:: no_debug

   Disables debug printouts during run time.

