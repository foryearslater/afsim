:orphan:

.. ****************************************************************************
.. CUI
..
.. The Advanced Framework for Simulation, Integration, and Modeling (AFSIM)
..
.. Copyright (C) 2021 Stellar Science; U.S. Government has Unlimited Rights.
..
.. The use, dissemination or disclosure of data in this file is subject to
.. limitation or restriction. See accompanying README and LICENSE for details.
.. ****************************************************************************

.. demo:: multiresolution_demos

.. |classification| replace:: Unclassified
.. |date|           replace:: 2021-12-14
.. |group|          replace:: Demos
.. |image|          replace:: images/multiresolution_demo.png
.. |tags|           replace:: n/a
.. |title|          replace:: multiresolution demo
.. |startup|        replace:: air_mover_demo.txt
.. |summary|        replace:: A few examples demonstrating multiresolution components.

.. |i| image:: images/multiresolution_demo.png
   :height: 150 px
   :width:  150 px

.. include:: demo_template.txt

Included are several examples demonstrating multiresolution platform components. 
The `fidelity` parameters may be adjusted to demonstrate how the choice of model and scenario results change with fidelity.
Included in most is a comparison platform to demonstrate that the behavior is the same when using the same models.

Examples demonstrating multiresolution movers, sensors, comms, processors, fuel, optical signatures, and radar signatures are included. 
Each scenario is fairly simple to show how a multiresolution component can be set up. 
The scenarios are intended to illustration multiresolution flexibility, and are not necessarily exquisite examples of how to use each of the constituent models.

air_mover_demo.txt
------------------

This example demonstrates a simple use of :command:`multiresolution_mover`: Two identical mover models (:model:`WSF_AIR_MOVER`), but with different update intervals. 
For comparison, a platform that uses :model:`WSF_AIR_MOVER` is included. The fidelity parameter can be adjusted to choose the model that will be used on the platform. 
A fidelity value [0,0.5) will choose an  :model:`WSF_AIR_MOVER` with an update interval of 30 seconds and a value in [0.5, 1.0] will choose an AIR_MOVER with an update interval of 0.1 s.

comm_demo.txt
-------------

This example demonstrates a simple use of :command:`multiresolution_comm`. 
Two different comm models can be used (:model:`WSF_COMM_TRANSCEIVER` or :model:`WSF_RADIO_TRANSCEIVER`). 
For comparison, platforms with standard comm models are included as well. 
In this example the two platforms directly send messages via scripting.

comm_with_command_chain_demo.txt
--------------------------------

This example demonstrates a slightly more involved use of :command:`multiresolution_comm`.
As in comm_demo.txt, two different comm models can be used (:model:`WSF_COMM_TRANSCEIVER` or :model:`WSF_RADIO_TRANSCEIVER`).
However, in this demo, a command chain with a network is also used.
For comparison, platforms with standard comm models are included as well.
In this example a commander platform sends messages to subordinates.

fuel_demo.txt
-------------

This example demonstrates a simple use of :command:`multiresolution_fuel`: Two models are included in the multiresolution model, one being a constant rate :model:`WSF_FUEL` and one being a :model:`WSF_TABULAR_RATE_FUEL`.
For comparison, a platform that uses the same :model:`WSF_TABULAR_RATE_FUEL` is also included.
The fidelity parameter can be adjusted to choose the model that will be used on the platform.
A fidelity value in [0,0.5) will choose the constant rate :model:`WSF_FUEL` model and a value in [0.5, 1.0] will choose the :model:`WSF_TABULAR_RATE_FUEL` model.

optical_signature_demo.txt
--------------------------

This demo adapts the demo in :demo:`signature_demos` to make the fighter platform's optical signature multiresolution by combining the three optical signatures defined in signature_demos/signatures with :command:`multiresolution_optical_signature`.
It uses the same sensors, but alters the fighter's route.
Varying the fidelity parameter in the platform definition will choose different signatures, with [0-0.33) choosing the spherical signature, [0.33-0.66) choosing the box signature, and [0.66-1.0] the multi-shape signature.

processor_demo.txt
------------------

This example demonstrates a simple use of :command:`multiresolution_processor`.
Two different implementations of a :model:`WSF_TASK_PROCESSOR` are included as options in a :command:`multiresolution_processor` model.
One model simply sets the *achilles* platform to go to a given location at a given speed.
The other sets the *achilles* platform to advance to the location at which it detected the tortoise platform indefinitely.

processor_with_link_demo.txt
----------------------------

This example demonstrates a simple use of :command:`multiresolution_processor` in which internal links are used.
Two :model:`WSF_SCRIPT_PROCESSOR` models are included which have different implementations.
Two platforms send messages to each other over a comm, and messages are routed to the script processor.

radar_signature_demo.txt
------------------------

Similar to optical_signature_demo, this demonstrates the usage of :command:`multiresolution_radar_signature`.
An air platform with a :command:`multiresolution_radar_signature` is used with two signature options, a constant signature and a tabular signature.
Two ground-based radars track the air platform.
The fidelity parameter may be adjusted to choose the signature.

sensor_demo.txt
---------------

This example demonstrates a simple use of :command:`multiresolution_sensor`.
Two different sensor models are used (:model:`WSF_IRST_SENSOR` and :model:`WSF_GEOMETRIC_SENSOR`).
For comparison, a platform with a standard :model:`WSF_GEOMETRIC_SENSOR` is included as well.
An air-based platform flies past the ground-based sensor sites and events are recorded for detection attempts, and tracks initiated, updated, and dropped.

space_mover_demo.txt
--------------------

This example demonstrates a simple use of :command:`multiresolution_mover`.
Two different mover models are used (:model:`WSF_SPACE_MOVER` and :model:`WSF_INTEGRATING_SPACE_MOVER`).
For comparison, a platform that uses :model:`WSF_SPACE_MOVER` is included.
The `fidelity` parameter can be adjusted to choose the model that will be used on the platform.