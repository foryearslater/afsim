:orphan:

.. ****************************************************************************
.. CUI//REL TO USA ONLY
..
.. The Advanced Framework for Simulation, Integration, and Modeling (AFSIM)
..
.. The use, dissemination or disclosure of data in this file is subject to
.. limitation or restriction. See accompanying README and LICENSE for details.
.. ****************************************************************************

Weapon Component
----------------

.. model:: uci_component WEAPON

.. parsed-literal::

   uci_component <type> WEAPON

      Part Commands ...

      :command:`uci_component` Commands ...

      capability <string>
         
         uuids
            <string>*
         end_uuids

         store_category <string>
         store_type <int>
      
      end_capability
         
   end_uci_component

Overview
========

This component handles the Strike UCI messages for all weapons on a platform. 

Commands
========

.. include: ./uci_part_commands.txt

.. command:: capability <name> ... end_capability

   This block defines necessary information for each weapon of the given name, including the store category,
   store type, and any UUID that corresponds to this weapon.

Capability Commands
===================

.. command:: uuids ... end_uuids

   Add a list of UUIDs for each quantity of the given weapon. If the number of UUIDs defined is less than the
   quantity of the weapon, the rest will be given randomly generated UUIDs. Conversely, if too many UUIDs are
   given, only those up to the quantity of the weapon will be used.

.. command:: store_category <string>

   Add a store category to the weapon. Available options are "air", "ground", "gun", "sea_subsurface",
   "sea_surface", and "sea_surface_samssm".

.. command:: store_type int

   Add a store type to the weapon.

.. warning:: If the weapon's store category and/or the store type is not defined, the weapon will be ignored by
             the UCI interface. No messages to the weapon's group of capabilities will be handled.

Message Types
=============

All message types are able to be sent via script methods, unless noted otherwise.

Activity
^^^^^^^^

:class:`UCI_StrikeActivityMessage` will be sent on the following events:

   .. note:: Not yet implemented

Capability
^^^^^^^^^^

:class:`UCI_StrikeCapabilityMessage` will be sent on the following events:

   - On update interval

CapabilityStatus
^^^^^^^^^^^^^^^^

:class:`UCI_StrikeCapabilityStatusMessage` will be sent on the following events:

   - On update interval

Command
^^^^^^^

:class:`UCI_StrikeActivityMessage` will be sent on the following events:

   .. note:: Not yet implemented

CommandStatus
^^^^^^^^^^^^^

:class:`UCI_StrikeActivityMessage` will be sent on the following events:

   .. note:: Not yet implemented

ControlRequest
^^^^^^^^^^^^^^

:class:`UCI_ControlRequestMessage` will be sent on the following events:

   - Script only

ControlRequestStatus
^^^^^^^^^^^^^^^^^^^^

:class:`UCI_ControlRequestStatusMessage` will be sent on the following events:

   - When a ControlRequestMessage is received and handled (one per controlee in message)

ControlStatus
^^^^^^^^^^^^^

:class:`UCI_ControlStatusMessage` will be sent on the following events:

   - When a ControlRequestMessage is received and handled (one per controlee in message)
   - On update interval

SettingsCommand
^^^^^^^^^^^^^^^

:class:`UCI_StrikeSettingsCommandMessage` will be sent on the following events:

   .. note:: Not yet implemented

SettingsCommandStatus
^^^^^^^^^^^^^^^^^^^^^

:class:`UCI_StrikeActivityMessage` will be sent on the following events:

   .. note:: Not yet implemented

SubsystemStatus
^^^^^^^^^^^^^^^

:class:`UCI_SubsystemStatusMessage` will be sent on the following events:

   - On update interval

SystemStatus
^^^^^^^^^^^^

:class:`UCI_SystemStatusMessage` will be sent on the following events:

   - On update interval

   .. note:: Not yet implemented in script
