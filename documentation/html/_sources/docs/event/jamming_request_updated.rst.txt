:orphan:

.. ****************************************************************************
.. CUI
..
.. The Advanced Framework for Simulation, Integration, and Modeling (AFSIM)
..
.. The use, dissemination or disclosure of data in this file is subject to
.. limitation or restriction. See accompanying README and LICENSE for details.
.. ****************************************************************************

.. _JAMMING_REQUEST_UPDATED:

JAMMING_REQUEST_UPDATED
-----------------------

Format
======

*All Events*

::

 <time> <event> <platform name> weapon: <weapon name>
  Mode: <current mode name> Active Requests: <count of EM transmitters>
  Frequency: {<frequency * 1E-9> " ghz" | <frequency * 1E-6> " mhz" | <frequency * 1E-3> " khz" | <frequency> " hz"
  Bandwidth: {<bandwidth * 1E-9> " ghz" | <bandwidth * 1E-6> " mhz" | <bandwidth> * 1E-3> " khz" | <bandwidth> " hz"
  *If Target is valid:*
  Target: <target name>

Breakdown
=========

<time>
    current simulation time
<event>
    simulation event that occurred
<platform name>
    name of platform that contains jammer
weapon: <weapon name>
    name of jammer (jammers are modeled as weapons)
Mode: <current mode name>
    current jammer mode
Active Requests: <count of EM transmitters>
    number of jammer transmitters (current jammer mode only)
Frequency: <frequency> <units>
    frequency of jammer request and frequency units
Bandwidth: <bandwidth> <units>
    transmitter bandwidth

*Following is added to message only if a valid **Target** was selected*

Target: target name <target name>
    name of sensor that is being jammed

How it Appears in Output
========================

*needs details*

How to Show Event Messages
==========================

.. parsed-literal::

  :command:`event_output`
     file replay.evt              # write event messages to file "replay.evt"
     enable JAMMING_REQUEST_CANCELED
     enable JAMMING_REQUEST_INITIATED
     enable JAMMING_REQUEST_UPDATED
  end_event_output
