// ****************************************************************************
// CUI
//
// The Advanced Framework for Simulation, Integration, and Modeling (AFSIM)
//
// Copyright 2018 Infoscitex, a DCS Company. All rights reserved.
//
// The use, dissemination or disclosure of data in this file is subject to
// limitation or restriction. See accompanying README and LICENSE for details.
// ****************************************************************************

#include "AdvancedConstellationGenerator.hpp"

#include <sstream>

#include "UtMath.hpp"
#include "WsfConstellationOptions.hpp"
#include "WsfSpaceOrbitSize.hpp"

namespace
{

// This is used to mark out the section of the file that will be saved between invocations of the
// constellation generator script generator.
const std::string cGENERAL_MARKER{"# YOUR SCRIPTS HERE - content between these two markers will not be overwritten\n"
                                  "#                     by the Constellation Maker\n"};

// This is the signature for the specialization function.
const std::string cSPECIFIC_MARKER{"script void SpecializeMember(FileIO aFile, int aPlane, int aSat)\n"};

// These markers give the bounds on the JSON formatted options blocks in generate input files.
const std::string cHEADER_START_MARKER{"# New file created by AFSIM Wizard using the Constellation Maker\n/*\n"};

//! Generate the file header.
//!
//! This is used to create the header for generator script input files.
//!
//! \param aOptions - the constellation options.
//! \param aStream  - the stream into which the header is written.
void GenerateHeader(const WsfConstellationOptions& aOptions, std::ostream& aStream)
{
   aOptions.OutputOptions(aStream);
   aStream << "\n";
}

//! Get the semi-major axis from the constellation options.
//!
//! Three of the four ways to specify the orbit size are output as semi_major_axis in
//! generated input files. This method returns the equivalent semi-major axis.
//!
//! \param aOptions - the Constellation Options.
//! \return         - The Semi-major axis.
UtLengthValue GetSemiMajorAxisFromOptions(const WsfConstellationOptions& aOptions)
{
   UtLengthValue sma{};
   if (aOptions.SpecifiedAsCircularAltitude())
   {
      UtLengthValue altitude  = aOptions.GetCircularAltitude();
      auto          orbitSize = wsf::space::OrbitSize::FromCircularAltitude(altitude);
      sma                     = UtLengthValue{orbitSize.GetSemiMajorAxis()};
      sma.ConvertToUnit(altitude.GetUnit());
   }
   else if (aOptions.SpecifiedAsSemiMajorAxis())
   {
      sma = aOptions.GetSemiMajorAxis();
   }
   else if (aOptions.SpecifiedAsOrbitalPeriod())
   {
      auto orbitSize = wsf::space::OrbitSize::FromOrbitalPeriod(aOptions.GetOrbitalPeriod());
      sma            = UtLengthValue{orbitSize.GetSemiMajorAxis()};
      sma.ConvertToUnit(UtUnitLength::cKILOMETERS);
   }
   return sma;
}

//! Generate the general user content.
//!
//! This will put any general user content that was captured from the old version of a
//! generator script into the new generator script.
//!
//! \param aGeneralUserContent - the user content to put out.
//! \param aStream             - the stream into which that content is output.
void GenerateUserContents(const std::string& aGeneralUserContent, std::ostream& aStream)
{
   aStream << cGENERAL_MARKER << aGeneralUserContent << cGENERAL_MARKER << std::endl;
}

//! Generate the script variable for the orbit size.
//!
//! The size will be specified either by revs per day, or via semi-major axis.
//!
//! \param aOptions - the constellation options.
//! \param aStream  - the stream into which the content is output.
void GenerateOrbitSizeScriptVariable(const WsfConstellationOptions& aOptions, std::ostream& aStream)
{
   if (aOptions.SpecifiedAsRevolutionsPerDay())
   {
      aStream << "   double cmRevsPerDay      = " << aOptions.GetRevolutionsPerDay() << ";\n";
   }
   else
   {
      auto sma = GetSemiMajorAxisFromOptions(aOptions);
      aStream << "   double cmSemiMajorAxis   = " << sma.GetAsUnit(UtUnitLength::cKILOMETERS) << ";\n";
   }
}

//! Generate the script variables block.
//!
//! This block allows for the user to have access to the constellation options in
//! their specialization script.
//!
//! \param aOptions - the constellation options.
//! \param aStream  - the stream into which the variable block is inserted.
void GenerateVariablesBlock(const WsfConstellationOptions& aOptions, std::ostream& aStream)
{
   aStream << "# DO NOT MODIFY - This block is automatically generated by the Constellation Maker.\n";
   aStream << "#                 It may be overwritten.\n";
   aStream << "script_variables\n";
   aStream << "   string cmBaseName        = \"" << aOptions.GetConstellationName() << "\";\n";
   aStream << "   string cmPlatformType    = \"" << aOptions.GetPlatformType() << "\";\n";
   aStream << "   string cmOutputPath      = \"" << aOptions.GetBasePath().GetFileName() << "\";\n";
   GenerateOrbitSizeScriptVariable(aOptions, aStream);
   aStream << "   double cmInclination     = " << aOptions.GetInclination().GetAsUnit(UtUnitAngle::cDEGREES) << ";\n";
   aStream << "   int    cmNumPlanes       = " << aOptions.GetNumPlanes() << ";\n";
   aStream << "   int    cmNumSatsPerPlane = " << aOptions.GetSatsPerPlane() << ";\n";
   aStream << "   double cmInitialRAAN     = " << aOptions.GetInitialRAAN().GetAsUnit(UtUnitAngle::cDEGREES) << ";\n";
   aStream << "   double cmRAAN_Range      = " << aOptions.GetRAAN_Range().GetAsUnit(UtUnitAngle::cDEGREES) << ";\n";
   aStream << "   double cmInitialAnomaly  = " << aOptions.GetInitialAnomaly().GetAsUnit(UtUnitAngle::cDEGREES) << ";\n";
   aStream << "   double cmAnomalyAlias    = " << aOptions.GetAnomalyAlias().GetAsUnit(UtUnitAngle::cDEGREES) << ";\n";
   aStream << "end_script_variables\n\n";
}

//! Generate a few utility scripts.
void GenerateUtilityScripts(std::ostream& aStream)
{
   aStream << "# DO NOT MODIFY - changes will be overwritten\n";
   aStream << "# Generate the platform name for a given satellite\n";
   aStream << "script string GenerateName(int aPlane, int aSat)\n";
   aStream << "   return cmBaseName + \"_\" + (string)aPlane + \"_\" + (string)aSat;\n";
   aStream << "end_script\n\n";

   aStream << "# DO NOT MODIFY - changes will be overwritten\n";
   aStream << "# Return the number of the next satellite in a plane, wrapping around as needed.\n";
   aStream << "script int NextSatInPlane(int aSat)\n";
   aStream << "   int retval = aSat + 1;\n";
   aStream << "   if (retval == cmNumSatsPerPlane)\n";
   aStream << "   {\n";
   aStream << "      retval = 0;\n";
   aStream << "   }\n";
   aStream << "   return retval;\n";
   aStream << "end_script\n\n";

   aStream << "# DO NOT MODIFY - changes will be overwritten\n";
   aStream << "# Return the number of the previous satellite in a plane, wrapping around as needed.\n";
   aStream << "script int PrevSatInPlane(int aSat)\n";
   aStream << "   int retval = aSat - 1;\n";
   aStream << "   if (retval < 0)\n";
   aStream << "   {\n";
   aStream << "      retval = cmNumSatsPerPlane - 1;\n";
   aStream << "   }\n";
   aStream << "   return retval;\n";
   aStream << "end_script\n\n";
}

//! Output the specialization script.
//!
//! This will output the specialization script, including any user content captured from an
//! existing generator script file.
//!
//! \param aSpecificUserContent - the content of the specialization script from previous generator scripts.
//! \param aStream              - the stream into which the specialization script is inserted.
void GenerateCustomizationBlock(const std::string& aSpecificUserContent, std::ostream& aStream)
{
   aStream << "# YOUR MODIFICATIONS HERE\n";
   aStream << "# This script is called during constellation generation to allow customization of\n";
   aStream << "# the platforms that compose the constellation. Do not change the signature or the\n";
   aStream << "# name of this script, but the contents can be freely modified.\n";
   aStream << cSPECIFIC_MARKER;
   aStream << aSpecificUserContent;
   aStream << "end_script\n\n";
}

//! Generate the line in the generated script that will specify the orbit size.
//!
//! \param aOptions - the constellation options.
//! \param aStream  - the stream into which the script is inserted.
void GenerateOrbitSizeScriptLine(const WsfConstellationOptions& aOptions, std::ostream& aStream)
{
   if (aOptions.SpecifiedAsRevolutionsPerDay())
   {
      aStream << "         file.Writeln(\"      revs_per_day \" + (string)cmRevsPerDay);\n";
   }
   else
   {
      aStream << "         file.Writeln(\"      semi_major_axis \" + (string)cmSemiMajorAxis + \" km\");\n";
   }
}

//! Generate the main generator function.
void GenerateGenerator(const WsfConstellationOptions& aOptions, std::ostream& aStream)
{
   aStream << "# DO NOT MODIFY - any changes may be overwritten\n";
   aStream << "execute at_time 1 sec absolute\n";
   aStream << "   string fileName = cmOutputPath + \"/\" + cmBaseName + \"_autogen.txt\";\n";
   aStream << "   FileIO file = {};\n";
   aStream << "   file.Open(fileName, \"out\");\n";
   aStream << "   \n";
   aStream << "   file.Writeln(\"# New file created by " << aOptions.GetGeneratedFilePrefix() << "_generator.txt.\");\n";
   aStream << "   file.Writeln(\"# Modifications to this file may be overwritten.\");\n";
   aStream << "   file.Writeln(\"\");\n";
   aStream << "   \n";
   aStream << "   for (int plane = 0; plane < cmNumPlanes; plane += 1)\n";
   aStream << "   {\n";
   aStream << "      double raan = cmInitialRAAN + plane * cmRAAN_Range / cmNumPlanes;\n";
   aStream << "      raan = MATH.NormalizeAngle0_360(raan);\n";
   aStream << "      for (int sat = 0; sat < cmNumSatsPerPlane; sat += 1)\n";
   aStream << "      {\n";
   aStream
      << "         double anomaly = cmInitialAnomaly + sat * 360.0 / cmNumSatsPerPlane + cmAnomalyAlias * plane;\n";
   aStream << "         anomaly = MATH.NormalizeAngle0_360(anomaly);\n";
   aStream << "         string name = GenerateName(plane, sat);\n";
   aStream << "         \n";
   aStream << "         file.Writeln(\"platform \" + name + \" \" + cmPlatformType);\n";
   aStream << "         file.Writeln(\"   mover\");\n";
   aStream << "         file.Writeln(\"      inclination \" + (string)cmInclination + \" deg\");\n";
   GenerateOrbitSizeScriptLine(aOptions, aStream);
   aStream << "         file.Writeln(\"      raan \" + (string)raan + \" deg\");\n";
   aStream << "         file.Writeln(\"      true_anomaly \" + (string)anomaly + \" deg\");\n";
   aStream << "         file.Writeln(\"   end_mover\");\n";
   aStream << "         SpecializeMember(file, plane, sat);\n";
   aStream << "         file.Writeln(\"end_platform\");\n";
   aStream << "         file.Writeln(\"\");\n";
   aStream << "      }\n";
   aStream << "   }\n";
   aStream << "   \n";
   aStream << "   file.Close();\n";
   aStream << "end_execute\n";
}

//! Grab the content from a string between the given markers.
std::string GrabContentBetween(const std::string& aInitialMarker, const std::string& aFinalMarker, const std::string& aContents)
{
   std::string retval{};
   auto        firstPos = aContents.find(aInitialMarker);
   if (firstPos != std::string::npos)
   {
      auto secondPos = firstPos + aInitialMarker.size();
      auto thirdPos  = aContents.find(aFinalMarker, secondPos);
      if (thirdPos != std::string::npos)
      {
         retval = aContents.substr(secondPos, thirdPos - secondPos);
      }
   }
   return retval;
}

} // namespace

//! Generate a constellation generator.
//!
//! This will produce output into the given @p aStream that will be a runnable
//! input file for AFSIM that will produce an output file that contains the
//! constellation. This differs from Generate in that Generate creates the
//! scenario file directly, and this method will create a script that will
//! generate the scenario file. The extra step allows for users to customize
//! the contents of the platforms in the constellation with a user created script.
//!
//! \param aOptions             - the constellation design options.
//! \param aGeneralUserContent  - the user content at global scope in the file.
//! \param aSpecificUserContent - the user content in the SpecializeMember function.
//! \param aStream              - the stream into which the constellation generator will be generated.
void SpaceTools::AdvancedConstellationGenerator::CreateGenerator(const WsfConstellationOptions& aOptions,
                                                                 const std::string&             aGeneralUserContent,
                                                                 const std::string&             aSpecificUserContent,
                                                                 std::ostream&                  aStream)
{
   GenerateHeader(aOptions, aStream);
   GenerateVariablesBlock(aOptions, aStream);
   GenerateUtilityScripts(aStream);
   GenerateUserContents(aGeneralUserContent, aStream);
   GenerateCustomizationBlock(aSpecificUserContent, aStream);
   GenerateGenerator(aOptions, aStream);
}

//! Retrieve the user content in a generator script.
//!
//! When a generator script is reproduced into an existing file, there are two sections of
//! the file that are saved, and brought into the updated version of the generator script.
//! This routine retrieves this user data.
//!
//! \param aFileContents          - the contents of the existing file.
//! \param aGeneralContent  [out] - string in which to put the general user contents.
//! \param aSpecificContent [out] - string in which to put the specialization user contents.
void SpaceTools::AdvancedConstellationGenerator::GrabUserContent(const std::string& aFileContents,
                                                                 std::string&       aGeneralContent,
                                                                 std::string&       aSpecificContent)
{
   aGeneralContent  = GrabContentBetween(cGENERAL_MARKER, cGENERAL_MARKER, aFileContents);
   aSpecificContent = GrabContentBetween(cSPECIFIC_MARKER, std::string("end_script"), aFileContents);
}
