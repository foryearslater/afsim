// ****************************************************************************
// CUI
//
// The Advanced Framework for Simulation, Integration, and Modeling (AFSIM)
//
// Copyright 2019 Infoscitex, a DCS Company. All rights reserved.
//
// The use, dissemination or disclosure of data in this file is subject to
// limitation or restriction. See accompanying README and LICENSE for details.
// ****************************************************************************

#include "NewFilePrefObject.hpp"

#include <cctype>

wizard::NewFilePrefData::NewFilePrefData()
{
   mData.emplace_back();
   mData[0].mName = "default";
   mData[0].mText = "File generated by Wizard %VERSION% on %DATE%.";
}

wizard::NewFilePrefObject::NewFilePrefObject(QObject* aParent)
   : wkf::PrefObjectT<NewFilePrefData>(aParent, cNAME)
{
}

void wizard::NewFilePrefObject::Apply()
{
   // No actions necessary
}

void wizard::NewFilePrefObject::SetPreferences(NewFilePrefData aData)
{
   mCurrentPrefs = std::move(aData);
}

wizard::NewFilePrefData wizard::NewFilePrefObject::ReadSettings(QSettings& aSettings) const
{
   if (!aSettings.contains("headings/size"))
   {
      return NewFilePrefData();
   }

   NewFilePrefData retval;
   retval.mData.clear();

   const int size = aSettings.beginReadArray("headings");

   for (int i = 0; i < size; i++)
   {
      retval.mData.emplace_back();
      HeadingData& heading = retval.mData.back();
      aSettings.setArrayIndex(i);

      heading.mEnableComment = aSettings.value("enableComment", true).toBool();
      heading.mEnableMacros  = aSettings.value("enableMacros", true).toBool();
      heading.mName          = aSettings.value("headingName", QString()).toString().toStdString();
      heading.mText          = aSettings.value("headingText", QString()).toString().toStdString();
   }
   aSettings.endArray();

   return retval;
}

void wizard::NewFilePrefObject::SaveSettingsP(QSettings& aSettings) const
{
   const int size = static_cast<int>(mCurrentPrefs.mData.size());
   aSettings.beginWriteArray("headings", size);
   for (int i = 0; i < size; i++)
   {
      const HeadingData& heading = mCurrentPrefs.mData[i];
      aSettings.setArrayIndex(i);

      aSettings.setValue("enableComment", heading.mEnableComment);
      aSettings.setValue("enableMacros", heading.mEnableMacros);
      aSettings.setValue("headingName", QString::fromStdString(heading.mName));
      aSettings.setValue("headingText", QString::fromStdString(heading.mText));
   }
   aSettings.endArray();
}

int wizard::NewFilePrefObject::GetHeadingCount() const noexcept
{
   return static_cast<int>(mCurrentPrefs.mData.size());
}

wizard::HeadingData* wizard::NewFilePrefObject::GetHeading(const std::string& aName)
{
   for (auto& heading : mCurrentPrefs.mData)
   {
      if (aName == heading.mName)
      {
         return &heading;
      }
   }
   return nullptr;
}

const wizard::HeadingData* wizard::NewFilePrefObject::GetHeading(const std::string& aName) const
{
   for (auto& heading : mCurrentPrefs.mData)
   {
      if (aName == heading.mName)
      {
         return &heading;
      }
   }
   return nullptr;
}

wizard::HeadingData& wizard::NewFilePrefObject::AddHeading()
{
   mCurrentPrefs.mData.emplace_back();
   return mCurrentPrefs.mData.back();
}

void wizard::NewFilePrefObject::RemoveHeading(const std::string& aName)
{
   for (auto it = mCurrentPrefs.mData.begin(); it != mCurrentPrefs.mData.end();)
   {
      if (aName == it->mName)
      {
         it = mCurrentPrefs.mData.erase(it);
      }
      else
      {
         it++;
      }
   }
}

void wizard::NewFilePrefObject::SortList()
{
   // Sorting without regard to capitalization.
   std::sort(mCurrentPrefs.mData.begin(),
             mCurrentPrefs.mData.end(),
             [](const HeadingData& aLeft, const HeadingData& aRight) -> bool
             {
                size_t i = 0;
                while (true)
                {
                   if (i == aRight.mName.size())
                   {
                      return false;
                   }
                   if (i == aLeft.mName.size())
                   {
                      return true;
                   }
                   const char l = std::tolower(aLeft.mName[i]);
                   const char r = std::tolower(aRight.mName[i]);
                   if (l != r)
                   {
                      return l < r;
                   }
                   i++;
                }
             });
}

wizard::NewFileDataRange wizard::NewFilePrefObject::Data() const
{
   return NewFileDataRange{mCurrentPrefs.mData.begin(), mCurrentPrefs.mData.end()};
}

wizard::HeadingData* wizard::NewFilePrefObject::First()
{
   if (mCurrentPrefs.mData.empty())
   {
      return nullptr;
   }
   return mCurrentPrefs.mData.data();
}

const wizard::HeadingData* wizard::NewFilePrefObject::First() const
{
   if (mCurrentPrefs.mData.empty())
   {
      return nullptr;
   }
   return mCurrentPrefs.mData.data();
}
