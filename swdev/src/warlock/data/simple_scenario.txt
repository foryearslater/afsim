# ****************************************************************************
# CUI
#
# The Advanced Framework for Simulation, Integration, and Modeling (AFSIM)
#
# The use, dissemination or disclosure of data in this file is subject to
# limitation or restriction. See accompanying README and LICENSE for details.
# ****************************************************************************


start_date dec 18 2014
start_time 18:44:00

realtime
end_time 10 min

event_pipe 
   file output.aer
end_event_pipe

route GlobalRoute0
   label waypoint0 position 22:10n 159:10w
   label waypoint1 position 21:10n 159:10w 
end_route

script int NOTWARLOCK_GlobalIntFunction(int aSomeInt)
{
   writeln("Int is: ", aSomeInt);
   return aSomeInt;
}
end_script

script void WARLOCK_VoidFunction()
{
   writeln("Hello World!");
}
end_script

script double WARLOCK_3Args(bool aSomeBool, double aSomeDouble, WsfPlatform aSomePlatform)
{
   writeln("Bool is:     ", aSomeBool);
   writeln("Double is:   ", aSomeDouble);
   writeln("Platform is: ", aSomePlatform.Name());
   return aSomeDouble;
}
end_script

script double WARLOCK_GlobalDoubleFunction(double aSomeDouble)
{
   writeln("Double is: ", aSomeDouble);
   return aSomeDouble;
}
end_script

script double WARLOCK_GlobalIntFunction(int aSomeInt)
{
   writeln("Int is: ", aSomeInt);
   return aSomeInt;
}
end_script

script bool WARLOCK_GlobalBoolFunction(bool aSomeBool)
{
   writeln("Bool is: ", aSomeBool);
   return aSomeBool;
}
end_script

script string WARLOCK_GlobalStringFunction(string aSomeString)
{
   writeln("String is: ", aSomeString);
   return aSomeString;
}
end_script

script WsfPlatform WARLOCK_GlobalPlatformFunction(WsfPlatform aSomePlatform)
{
   writeln("Platform is: ", aSomePlatform.Name());
   return aSomePlatform;
}
end_script

script WsfRoute WARLOCK_GlobalPlatformRouteFunction(WsfPlatform aSomePlatform)
{
   writeln("Platform is: ", aSomePlatform.Name());
   return aSomePlatform.Route();
}
end_script

script WsfGeoPoint WARLOCK_GlobalLocationFunction(WsfGeoPoint aSomeLocation)
{
   writeln("Location is: ", aSomeLocation.ToString());
   return aSomeLocation;
}
end_script

script WsfTrack WARLOCK_GlobalTrackFunction(WsfTrack aSomeTrack)
{
   writeln("Track is: ", aSomeTrack.TrackId());
   return aSomeTrack;
}
end_script

script WsfRoute WARLOCK_GlobalRouteFunction(WsfRoute aSomeRoute)
{
   writeln("Route is: ", aSomeRoute.ToString());
   return aSomeRoute;
}
end_script

script Array<int> WARLOCK_GlobalIntArrayFunction(Array<int> aSomeInts)
{
   writeln("Ints are: ");
   for (int i = 0; i < aSomeInts.Size(); i += 1)
   {
      writeln(aSomeInts[i]);
   }
   return aSomeInts;
}
end_script

script Array<double> WARLOCK_GlobalDoubleArrayFunction(Array<double> aSomeDoubles)
{
   writeln("Doubles are: ");
   for (int i = 0; i < aSomeDoubles.Size(); i += 1)
   {
      writeln(aSomeDoubles[i]);
   }
   return aSomeDoubles;
}
end_script

script Array<bool> WARLOCK_GlobalBoolArrayFunction(Array<bool> aSomeBools)
{
   writeln("Bools are: ");
   for (int i = 0; i < aSomeBools.Size(); i += 1)
   {
      writeln(aSomeBools[i]);
   }
   return aSomeBools;
}
end_script

script Array<string> WARLOCK_GlobalStringArrayFunction(Array<string> aSomeStrings)
{
   writeln("Strings are: ");
   for (int i = 0; i < aSomeStrings.Size(); i += 1)
   {
      writeln(aSomeStrings[i]);
   }
   return aSomeStrings;
}
end_script

script Array<WsfGeoPoint> WARLOCK_GlobalLocationArrayFunction(Array<WsfGeoPoint> aSomePoints)
{
   writeln("Locations are: ");
   for (int i = 0; i < aSomePoints.Size(); i += 1)
   {
      writeln(aSomePoints[i].ToString());
   }
   return aSomePoints;
}
end_script

script Array<WsfTrack> WARLOCK_GlobalTrackArrayFunction(Array<WsfTrack> aSomeTracks)
{
   writeln("Tracks are: ");
   for (int i = 0; i < aSomeTracks.Size(); i += 1)
   {
      writeln(aSomeTracks[i].TrackId());
   }
   return aSomeTracks;
}
end_script

script Array<WsfPlatform> WARLOCK_GlobalPlatformArrayFunction(Array<WsfPlatform> aSomePlatforms)
{
   writeln("Platforms are: ");
   for (int i = 0; i < aSomePlatforms.Size(); i += 1)
   {
      writeln(aSomePlatforms[i].Name());
   }
   return aSomePlatforms;
}
end_script

script Array<WsfRoute> WARLOCK_GlobalRouteArrayFunction(Array<WsfRoute> aSomeRoutes)
{
   writeln("Routes are: ");
   for (int i = 0; i < aSomeRoutes.Size(); i += 1)
   {
      writeln(aSomeRoutes[i].Name());
   }
   return aSomeRoutes;
}
end_script

script void WARLOCK_GlobalSomeComplexFunction(bool aSomeBool, int aSomeInt, double aSomeDouble, string aSomeString, WsfGeoPoint aSomeLocation, WsfPlatform aSomePlatform, WsfTrack aSomeTrack, 
Array<bool> aSomeBools, Array<int> aSomeInts, Array<double> aSomeDoubles, Array<string> aSomeStrings, Array<WsfGeoPoint> aSomePoints, Array<WsfPlatform> aSomePlatforms, Array<WsfTrack> aSomeTracks)
{
   writeln("Bool is: ", aSomeBool, "\n");
   writeln("Int is: ", aSomeInt, "\n");
   writeln("Double is: ", aSomeDouble, "\n");
   writeln("String is: ", aSomeString, "\n");
   writeln("Location is: ", aSomeLocation.ToString(), "\n");
   writeln("Platform is: ", aSomePlatform.Name(), "\n");
   writeln("Track is: ", aSomeTrack.TrackId(), "\n");
   
   writeln("\nBools are:");
   for (int i = 0; i < aSomeBools.Size(); i += 1)
   {
      writeln(aSomeBools[i]);
   }
   writeln("\nInts are:");
   for (int i = 0; i < aSomeInts.Size(); i += 1)
   {
      writeln(aSomeInts[i]);
   }
   writeln("\nDoubles are:");
   for (int i = 0; i < aSomeDoubles.Size(); i += 1)
   {
      writeln(aSomeDoubles[i]);
   }
   writeln("\nStrings are:");
   for (int i = 0; i < aSomeStrings.Size(); i += 1)
   {
      writeln(aSomeStrings[i]);
   }
   writeln("\nLocations are: ");
   for (int i = 0; i < aSomePoints.Size(); i += 1)
   {
      writeln(aSomePoints[i].ToString());
   }
   writeln("\nPlatforms are: ");
   for (int i = 0; i < aSomePlatforms.Size(); i += 1)
   {
      writeln(aSomePlatforms[i].Name());
   }
   writeln("\nTracks are: ");
   for (int i = 0; i < aSomeTracks.Size(); i += 1)
   {
      writeln(aSomeTracks[i].TrackId());
   }
}
end_script

script bool WARLOCK_GlobalSomeOtherComplexFunction(int aSomeInt, WsfTrack aSomeTrack, Array<WsfGeoPoint> aSomePoints, Array<WsfPlatform> aSomePlatforms, WsfRoute aSomeRoute)
{
   writeln("Int is: ", aSomeInt);
   writeln("Track is: ", aSomeTrack.TrackId());
   writeln("Locations are: ");
   for (int i = 0; i < aSomePoints.Size(); i += 1)
   {
      writeln(aSomePoints[i].ToString());
   }
   writeln("Platforms are: ");
   for (int i = 0; i < aSomePlatforms.Size(); i += 1)
   {
      writeln(aSomePlatforms[i].Name());
   }
   writeln("Route is: ", aSomeRoute.Name());
   return aSomePoints.Size() == aSomePlatforms.Size();
}
end_script


platform_type BLUE_PLATFORM WSF_PLATFORM
   spatial_domain air
   side blue
   icon F-18
   mover WSF_AIR_MOVER
   end_mover 
   
   processor blue_processor WSF_TRACK_PROCESSOR
   end_processor
   
   sensor blue_sensor WSF_GEOMETRIC_SENSOR
      frame_time 1 sec
      maximum_range 400 km
      ignore_same_side
      reports_location
      reports_side
      on
      internal_link blue_processor
   end_sensor
   
   script void WARLOCK_ChangeTeam(string aSide)
   {
      PLATFORM.SetSide(aSide);
   }
   end_script
   
   script int NOTWARLOCK_IntFunction(int aSomeInt)
   {
      writeln("Int is: ", aSomeInt);
      return aSomeInt;
   }
   end_script
   
   script int WARLOCK_IntFunction(int aSomeInt)
   {
      writeln("Int is: ", aSomeInt);
      return aSomeInt;
   }
   end_script
   
   script double WARLOCK_DoubleFunction(double aSomeDouble)
   {
      writeln("Double is: ", aSomeDouble);
      return aSomeDouble;
   }
   end_script
   
   script bool WARLOCK_BoolFunction(bool aSomeBool)
   {
      writeln("Bool is: ", aSomeBool);
      return aSomeBool;
   }
   end_script
   
   script string WARLOCK_StringFunction(string aSomeString)
   {
      writeln("String is: ", aSomeString);
      return aSomeString;
   }
   end_script
   
   script WsfRoute WARLOCK_RoutePlatformFunction(WsfPlatform aSomePlatform)
   {
      writeln("Platform is: ", aSomePlatform.Name());
      return aSomePlatform.Route();
   }
   end_script
   
   script WsfGeoPoint WARLOCK_LocationFunction(WsfGeoPoint aSomeLocation)
   {
      writeln("Location is: ", aSomeLocation.ToString());
      return aSomeLocation;
   }
   end_script
   
   script WsfTrack WARLOCK_TrackFunction(WsfTrack aSomeTrack)
   {
      writeln("Track is: ", aSomeTrack.TrackId());
      return aSomeTrack;
   }
   end_script
   
   script int WARLOCK_RouteFunction(WsfRoute aSomeRoute)
   {
      writeln("Route is: ", aSomeRoute.ToString());
      return aSomeRoute.Size();
   }
   end_script
   
   script Array<int> WARLOCK_IntArrayFunction(Array<int> aSomeInts)
   {
      writeln("Ints are: ");
      for (int i = 0; i < aSomeInts.Size(); i += 1)
      {
         writeln(aSomeInts[i]);
      }
      return aSomeInts;
   }
   end_script
   
   script Array<double> WARLOCK_DoubleArrayFunction(Array<double> aSomeDoubles)
   {
      writeln("Doubles are: ");
      for (int i = 0; i < aSomeDoubles.Size(); i += 1)
      {
         writeln(aSomeDoubles[i]);
      }
      return aSomeDoubles;
   }
   end_script
   
   script Array<bool> WARLOCK_BoolArrayFunction(Array<bool> aSomeBools)
   {
      writeln("Bools are: ");
      for (int i = 0; i < aSomeBools.Size(); i += 1)
      {
         writeln(aSomeBools[i]);
      }
      return aSomeBools;
   }
   end_script
   
   script Array<string> WARLOCK_StringArrayFunction(Array<string> aSomeStrings)
   {
      writeln("Strings are: ");
      for (int i = 0; i < aSomeStrings.Size(); i += 1)
      {
         writeln(aSomeStrings[i]);
      }
      return aSomeStrings;
   }
   end_script
   
   script Array<WsfGeoPoint> WARLOCK_LocationArrayFunction(Array<WsfGeoPoint> aSomePoints)
   {
      writeln("Locations are: ");
      for (int i = 0; i < aSomePoints.Size(); i += 1)
      {
         writeln(aSomePoints[i].ToString());
      }
      return aSomePoints;
   }
   end_script
   
   script Array<WsfTrack> WARLOCK_TrackArrayFunction(Array<WsfTrack> aSomeTracks)
   {
      writeln("Tracks are: ");
      for (int i = 0; i < aSomeTracks.Size(); i += 1)
      {
         writeln(aSomeTracks[i].TrackId());
      }
      return aSomeTracks;
   }
   end_script
   
   script Array<WsfPlatform> WARLOCK_PlatformArrayFunction(Array<WsfPlatform> aSomePlatforms)
   {
      writeln("Platforms are: ");
      for (int i = 0; i < aSomePlatforms.Size(); i += 1)
      {
         writeln(aSomePlatforms[i].Name());
      }
      return aSomePlatforms;
   }
   end_script
   
   script int WARLOCK_RouteArrayFunction(Array<WsfRoute> aSomeRoutes)
   {
      writeln("Routes are: ");
      for (int i = 0; i < aSomeRoutes.Size(); i += 1)
      {
         writeln(aSomeRoutes[i].Name());
      }
      return aSomeRoutes.Size();
   }
   end_script
   
   script void WARLOCK_SomeComplexFunction(bool aSomeBool, int aSomeInt, double aSomeDouble, string aSomeString, WsfGeoPoint aSomeLocation, WsfPlatform aSomePlatform, WsfTrack aSomeTrack, 
   Array<bool> aSomeBools, Array<int> aSomeInts, Array<double> aSomeDoubles, Array<string> aSomeStrings, Array<WsfGeoPoint> aSomePoints, Array<WsfPlatform> aSomePlatforms, Array<WsfTrack> aSomeTracks)
   {
      writeln("Bool is: ", aSomeBool, "\n");
      writeln("Int is: ", aSomeInt, "\n");
      writeln("Double is: ", aSomeDouble, "\n");
      writeln("String is: ", aSomeString, "\n");
      writeln("Location is: ", aSomeLocation.ToString(), "\n");
      writeln("Platform is: ", aSomePlatform.Name(), "\n");
      writeln("Track is: ", aSomeTrack.TrackId(), "\n");
   
      writeln("\nBools are:");
      for (int i = 0; i < aSomeBools.Size(); i += 1)
      {
         writeln(aSomeBools[i]);
      }
      writeln("\nInts are:");
      for (int i = 0; i < aSomeInts.Size(); i += 1)
      {
         writeln(aSomeInts[i]);
      }
      writeln("\nDoubles are:");
      for (int i = 0; i < aSomeDoubles.Size(); i += 1)
      {
         writeln(aSomeDoubles[i]);
      }
      writeln("\nStrings are:");
      for (int i = 0; i < aSomeStrings.Size(); i += 1)
      {
         writeln(aSomeStrings[i]);
      }
      writeln("\nLocations are: ");
      for (int i = 0; i < aSomePoints.Size(); i += 1)
      {
         writeln(aSomePoints[i].ToString());
      }
      writeln("\nPlatforms are: ");
      for (int i = 0; i < aSomePlatforms.Size(); i += 1)
      {
         writeln(aSomePlatforms[i].Name());
      }
      writeln("\nTracks are: ");
      for (int i = 0; i < aSomeTracks.Size(); i += 1)
      {
         writeln(aSomeTracks[i].TrackId());
      }
   }
   end_script
   
end_platform_type

platform_type RED_PLATFORM WSF_PLATFORM
   spatial_domain air
   side red
   icon su-30
   mover WSF_AIR_MOVER
   end_mover 
   processor red_processor WSF_TRACK_PROCESSOR
   end_processor
   
   sensor red_sensor WSF_GEOMETRIC_SENSOR
      frame_time 1 sec
      maximum_range 400 km
      ignore_same_side
      reports_location
      reports_side
      on
      internal_link red_processor
   end_sensor
   
   script void WARLOCK_ChangeTeam(string aSide)
   {
      PLATFORM.SetSide(aSide);
   }
   end_script
   
end_platform_type

platform_type OTHER_PLATFORM WSF_PLATFORM
   spatial_domain air
   side green
   icon f-4
   mover WSF_AIR_MOVER
   end_mover 
end_platform_type

platform blue_1 BLUE_PLATFORM
   route 
      position   21.320n  158.50w  altitude 6000.0 ft  speed 500.0 kts
      position   21.320n  157.90w  altitude 10000.0 ft speed 500.0 kts
      position   21.520n  157.90w  altitude 8000.0 ft  speed 500.0 kts
      position   21.520n  157.60w  altitude 6000.0 ft  speed 500.0 kts
      position   21.320n  157.60w  altitude 7000.0 ft  speed 500.0 kts
      position   22.120n  158.20w  altitude 8000.0 ft  speed 500.0 kts    
      position   22.120n  157.30w  altitude 6000.0 ft  speed 500.0 kts   
      position   21.720n  157.90w  altitude 7000.0 ft  speed 500.0 kts
      position   21.920n  158.20w  altitude 8000.0 ft  speed 500.0 kts
      position   21.320n  158.20w  altitude 6000.0 ft  speed 500.0 kts
      position   21.320n  158.50w  altitude 8000.0 ft  speed 500.0 kts   
   end_route
   
   aux_data
      double sampleDouble = 1.1
      int    sampleInt = 1
      string sampleString = "blue_1"
   end_aux_data
   
end_platform

platform blue_2 BLUE_PLATFORM
   route 
      position   21.33n  158.50w  altitude 99.5 km  speed 400.0 kts
      position   21.33n  157.90w  altitude 100.5 km speed 450.0 kts
   end_route
   
   aux_data
      double myDouble = 2.2
      int    myInt = 2
      string myString = "blue_2"
   end_aux_data
   
end_platform

platform blue_3 BLUE_PLATFORM
   route 
      position   21.35n  158.50w  altitude 100.5 km  speed 450.0 kts
      position   21.35n  157.90w  altitude 99.5 km speed 500.0 kts
   end_route
   
   aux_data
      double myDouble = 3.3
      int    myInt = 3
      string myString = "blue_3"
   end_aux_data
   
end_platform

platform red_1 RED_PLATFORM
   side red
   route 
      position   21.37n  158.50w  altitude 6000.0 ft  speed 500.0 kts
      position   21.37n  157.90w  altitude 10000.0 ft speed 450.0 kts
   end_route
   
   aux_data
      string myString = "red_1"
   end_aux_data
   
end_platform

platform red_2 RED_PLATFORM
   side red
   route 
      position   21.39n  158.50w  altitude 6000.0 ft  speed 500.0 kts
      position   21.39n  157.90w  altitude 10000.0 ft speed 500.0 kts
   end_route
end_platform

platform blue_4 BLUE_PLATFORM
   side blue
   route
      position 21.43n 158.50w altitude 10000 feet speed 200 kts
      heading 90 deg
      extrapolate
   end_route
end_platform

platform red_3 RED_PLATFORM
   side red
   route
      position 21.43n 157.50w altitude 10000 feet speed 200 kts
      heading 270 deg
      extrapolate
   end_route
end_platform

platform green_platform_1 OTHER_PLATFORM
   side green
   route 
      position   21.41n  158.50w  altitude 6000.0 ft  speed 500.0 kts
      position   21.41n  157.90w  altitude 10000.0 ft speed 500.0 kts
   end_route

   on_broken remove
   
   on_update
      if (PLATFORM.TimeSinceCreation() >= 5)
      {
         PLATFORM.DeletePlatform();
      }
   end_on_update
end_platform

